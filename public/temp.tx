import { FC, useState, useEffect, useRef } from "react";
import ProductCard from "../components/ProductCard";
import { Product } from "../types";
import productsData from "../data/products.json";
import { SpatialDiv, enableDebugTool } from "@webspatial/react-sdk";
import { Spatial, SpatialHelper } from "@webspatial/core-sdk";

// Enable WebSpatial functionality
enableDebugTool();

const ProductList: FC = () => {
  const [products, setProducts] = useState<Product[]>([]);
  const [selectedCategory, setSelectedCategory] = useState<string>("");
  const [searchTerm, setSearchTerm] = useState<string>("");
  const spatialAreaRef = useRef<HTMLDivElement>(null);

  // Create manual 3D spatial area using core SDK
  useEffect(() => {
    const setupSpatial3D = async () => {
      if (!spatialAreaRef.current) return;
      
      try {
        // Add delay to ensure WebSpatial is fully initialized
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Check if WebSpatial is supported
        const spatial = new Spatial();
        if (!spatial.isSupported()) {
          console.log('WebSpatial not supported');
          spatialAreaRef.current.innerHTML = '<p style="color: #666; text-align: center; padding: 60px;">WebSpatial not supported</p>';
          return;
        }

        // Get SpatialHelper instance
        const helper = SpatialHelper.instance;
        if (!helper) {
          console.log('SpatialHelper not available');
          spatialAreaRef.current.innerHTML = '<p style="color: #666; text-align: center; padding: 60px;">SpatialHelper not available</p>';
          return;
        }

        // Create a 3D view area
        const viewEntity = await helper.session.createEntity();
        await viewEntity.setCoordinateSpace('Dom');
        
        // Create view component with error handling
        const viewComponent = await helper.session.createViewComponent();
        if (viewComponent) {
          await viewEntity.setComponent(viewComponent);
        }

        // Create wireframe box to trace 3D area bounds
        const wireframeBox = await helper.session.createMeshResource({ shape: 'box' });
        const wireframeMaterial = await helper.session.createPhysicallyBasedMaterialResource();
        
        // Set wireframe material properties - bright colored outline
        wireframeMaterial.baseColor = { r: 0.2, g: 0.8, b: 1.0, a: 0.8 }; // Bright cyan
        wireframeMaterial.metallic.value = 0.0;
        wireframeMaterial.roughness.value = 1.0;
        await wireframeMaterial.update();
        
        // Create wireframe model component
        const wireframeModel = await helper.session.createModelComponent();
        await wireframeModel.setMesh(wireframeBox);
        await wireframeModel.setMaterials([wireframeMaterial]);
        
        // Create wireframe entity - larger to act as bounds
        const wireframeEntity = await helper.session.createEntity();
        wireframeEntity.transform.scale.x = 1.2; // Slightly larger than content
        wireframeEntity.transform.scale.y = 1.2;
        wireframeEntity.transform.scale.z = 1.2;
        wireframeEntity.transform.position.z = 0; // At the center
        await wireframeEntity.setComponent(wireframeModel);
        await wireframeEntity.updateTransform();
        await wireframeEntity.setParent(viewEntity);

        // Create a simple 3D shape instead of complex model to avoid loading issues
        const simpleShape = await helper.shape.createShapeEntity('sphere');
        simpleShape.transform.position.z = -0.2;
        simpleShape.transform.scale.x = 0.3;
        simpleShape.transform.scale.y = 0.3; 
        simpleShape.transform.scale.z = 0.3;
        await simpleShape.updateTransform();
        await simpleShape.setParent(viewEntity);

        // Attach to DOM element
        const result = await helper.dom.attachSpatialView(spatialAreaRef.current);
        await wireframeEntity.setParent(result.entity);
        await simpleShape.setParent(result.entity);

        // Add success indicator
        spatialAreaRef.current.style.background = 'linear-gradient(45deg, #10b981, #3b82f6)';
        console.log('3D spatial area created successfully!');
        
      } catch (error) {
        console.error('Error setting up 3D spatial area:', error);
        const errorMessage = error instanceof Error ? error.message : 'Unknown error';
        spatialAreaRef.current.innerHTML = `<p style="color: #ef4444; text-align: center; padding: 20px;">Error: ${errorMessage}</p>`;
      }
    };

    setupSpatial3D(); 
  }, []);

  useEffect(() => {
    // 在实际应用中，这里可能会从 API 获取数据
    setProducts(productsData as Product[]);
  }, []);

  // 获取所有唯一的分类
  const categories = [
    "All",
    ...new Set(products.map(product => product.category)),
  ];

  // 根据分类和搜索词过滤商品
  const filteredProducts = products.filter(product => {
    const matchesCategory =
      selectedCategory === "" ||
      selectedCategory === "All" ||
      product.category === selectedCategory;
    const matchesSearch =
      product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      product.description.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesCategory && matchesSearch;
  });

  return (
    <div enable-xr className="py-8">
      <h1 className="list-title text-2xl sm:text-3xl font-bold text-gray-800 mb-6 sm:mb-8">
        Our Products
      </h1>

      {/* 搜索框 */}
      <div className="mb-6">
        <div className="relative max-w-md">
          <input
            type="text"
            placeholder="Search products..."
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white text-gray-800"
            value={searchTerm}
            onChange={e => setSearchTerm(e.target.value)}
          />
          <svg
            className="absolute right-3 top-2.5 h-5 w-5 text-gray-400"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
            />
          </svg>
        </div>
      </div>

      <div className="list-window flex flex-col md:flex-row gap-6">
        {/* 左侧分类菜单 */}
        <div enable-xr className="list-meun w-full md:w-64 shrink-0">
          <div
            enable-xr
            className="list-meun-bg bg-white rounded-lg shadow-md p-4"
          >
            <h2 className="text-lg font-semibold text-gray-800 mb-4">
              Categories
            </h2>
            <ul className="space-y-2">
              <li>
                <button
                  enable-xr
                  style={
                    import.meta.env.XR_ENV === "avp"
                      ? selectedCategory === ""
                        ? {
                            "--xr-background-material": "thin",
                          }
                        : {
                            "--xr-background-material": "thick",
                          }
                      : {}
                  }
                  className={`w-full text-left px-3 py-2 rounded-md transition-colors ${
                    import.meta.env.XR_ENV === "avp"
                      ? selectedCategory === ""
                        ? "text-gray-100"
                        : "text-gray-900"
                      : selectedCategory === ""
                        ? "bg-indigo-100 text-indigo-700 font-medium"
                        : "text-gray-700 hover:bg-gray-100"
                  }`}
                  onClick={() => setSelectedCategory("")}
                >
                  All Categories
                </button>
              </li>
              {categories.map(
                (category, index) =>
                  category !== "All" && (
                    <li key={index}>
                      <button
                        enable-xr
                        style={
                          import.meta.env.XR_ENV === "avp"
                            ? selectedCategory === category
                              ? {
                                  "--xr-background-material": "thin",
                                }
                              : {
                                  "--xr-background-material": "thick",
                                }
                            : {}
                        }
                        className={`w-full text-left px-3 py-2 rounded-md transition-colors ${
                          import.meta.env.XR_ENV === "avp"
                            ? selectedCategory === category
                              ? "text-gray-100"
                              : "text-gray-900"
                            : selectedCategory === category
                              ? "bg-indigo-100 text-indigo-700 font-medium"
                              : "text-gray-700 hover:bg-gray-100"
                        }`}
                        onClick={() => setSelectedCategory(category)}
                      >
                        {category}
                      </button>
                    </li>
                  )
              )}
            </ul>
          </div>
        </div>

        {/* 商品网格 */}
        <div className="flex-1">
                  {/* Simple 3D Test */}
        <div className="mb-6">
          <h3 className="text-lg font-semibold mb-2">3D Model Test</h3>
          
          {/* Method 1: Using SpatialDiv with spatialStyle (Simple 3D positioning) */}
          <SpatialDiv
            spatialStyle={{ position: { z: 100 } }}
            style={{ 
              width: '300px', 
              height: '200px',
              background: 'linear-gradient(45deg, #667eea,rgb(108, 162, 75))',
              border: '2px solid #e2e8f0',
              borderRadius: '12px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              marginBottom: '16px',
              color: 'white',
              fontSize: '18px',
              fontWeight: 'bold'
            }}
          >
            ♔ Simple 3D Positioned Element
          </SpatialDiv>

          {/* Method 2: Manual 3D spatial area using core SDK */}
          <div 
            ref={spatialAreaRef}
            style={{ 
              width: '300px', 
              height: '200px',
              background: '#f0f9ff',
              border: '2px solid rgb(233, 14, 200)',
              borderRadius: '10px'
            }}
          />
        </div>
          
          <div
            enable-xr-monitor
            className={"auto-fill-grid" + " gap-4 sm:gap-6"}
          >
            {filteredProducts.length > 0 ? (
              filteredProducts.map(product => (
                <ProductCard key={product.id} product={product} />
              ))
            ) : (
              <div className="col-span-full text-center py-8 sm:py-12">
                <p className="text-lg sm:text-xl text-gray-600">
                  No products found matching your criteria.
                </p>
                <button
                  className="mt-4 btn-primary"
                  onClick={() => {
                    setSelectedCategory("");
                    setSearchTerm("");
                  }}
                >
                  Clear Filters
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProductList;
